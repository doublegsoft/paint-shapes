{
  "version": 3,
  "sources": ["../src/common/Point.ts", "../src/common/Color.ts", "../src/shape/Shape.ts", "../src/shape/Rectangle.ts", "../src/shape/Square.ts", "../src/shape/Circle.ts", "../src/renderer/ShapeRenderer.ts", "../src/renderer/CircleRenderer.ts", "../src/renderer/SquareRenderer.ts", "../src/paint/FlatPlayground.ts"],
  "sourcesContent": ["/*\n** \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n** \u2588\u2584\u2500\u2584\u2584\u2500\u2588\u2588\u2580\u2584\u2500\u2588\u2588\u2584\u2500\u2584\u2588\u2584\u2500\u2580\u2588\u2584\u2500\u2584\u2588\u2500\u2584\u2500\u2584\u2500\u2588\u2580\u2580\u2580\u2580\u2580\u2588\u2588\u2500\u2584\u2584\u2584\u2584\u2588\u2500\u2588\u2500\u2588\u2588\u2580\u2584\u2500\u2588\u2588\u2584\u2500\u2584\u2584\u2500\u2588\u2584\u2500\u2584\u2584\u2500\u2588\u2500\u2584\u2584\u2584\u2584\u2588\n** \u2588\u2588\u2500\u2584\u2584\u2584\u2588\u2588\u2500\u2580\u2500\u2588\u2588\u2588\u2500\u2588\u2588\u2588\u2500\u2588\u2584\u2580\u2500\u2588\u2588\u2588\u2588\u2500\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\u2584\u2584\u2584\u2500\u2588\u2500\u2584\u2500\u2588\u2588\u2500\u2580\u2500\u2588\u2588\u2588\u2500\u2584\u2584\u2584\u2588\u2588\u2500\u2584\u2588\u2580\u2588\u2584\u2584\u2584\u2584\u2500\u2588\n** \u2580\u2584\u2584\u2584\u2580\u2580\u2580\u2584\u2584\u2580\u2584\u2584\u2580\u2584\u2584\u2584\u2580\u2584\u2584\u2584\u2580\u2580\u2584\u2584\u2580\u2580\u2584\u2584\u2584\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2584\u2584\u2584\u2584\u2584\u2580\u2584\u2580\u2584\u2580\u2584\u2584\u2580\u2584\u2584\u2580\u2584\u2584\u2584\u2580\u2580\u2580\u2584\u2584\u2584\u2584\u2584\u2580\u2584\u2584\u2584\u2584\u2584\u2580\n*/\n\n/**\n * A plain\u2011old JavaScript object that represents a point in 2-D or 3\u2011D space.\n *\n * @example\n *   const p = new Point(1.0, 2.0, 3.0);\n *   console.log(p.distanceTo(new Point(4, 6, 8))); // 7.3484692283495345\n */\nexport class Point {\n  /** X coordinate */\n  public x: number;\n\n  /** Y coordinate */\n  public y: number;\n\n  /** Z coordinate */\n  public z?: number = 0;\n\n  /**\n   * Constructs a new Point.\n   * @param x - The X coordinate.\n   * @param y - The Y coordinate.\n   * @param z - The Z coordinate.\n   */\n  constructor(x: number, y: number, z?: number) {\n    this.x = x;\n    this.y = y;\n    if (typeof z !== 'undefined') {\n      this.z = z;\n    } else {\n      this.z = 0;\n    }\n  }\n\n  public toString(): string {\n    if (typeof this.z === 'undefined') {\n      return `Point(${this.x}, ${this.y})`;\n    } else { \n      return `Point(${this.x}, ${this.y}, ${this.z})`;\n    }\n  }\n\n\n  /**\n   * Euclidean distance to another point.\n   * @param other - The other point.\n   * @returns The distance.\n   */\n  public distanceTo(other: Point): number {\n    const dx = this.x - other.x;\n    const dy = this.y - other.y;\n    if (typeof this.z === 'undefined') {\n      return Math.sqrt(dx * dx + dy * dy);\n    } else {\n      const dz = this.z - other.z!;\n      return Math.sqrt(dx * dx + dy * dy + dz * dz);\n    }\n  }\n\n}", "/*\n** \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n** \u2588\u2584\u2500\u2584\u2584\u2500\u2588\u2588\u2580\u2584\u2500\u2588\u2588\u2584\u2500\u2584\u2588\u2584\u2500\u2580\u2588\u2584\u2500\u2584\u2588\u2500\u2584\u2500\u2584\u2500\u2588\u2580\u2580\u2580\u2580\u2580\u2588\u2588\u2500\u2584\u2584\u2584\u2584\u2588\u2500\u2588\u2500\u2588\u2588\u2580\u2584\u2500\u2588\u2588\u2584\u2500\u2584\u2584\u2500\u2588\u2584\u2500\u2584\u2584\u2500\u2588\u2500\u2584\u2584\u2584\u2584\u2588\n** \u2588\u2588\u2500\u2584\u2584\u2584\u2588\u2588\u2500\u2580\u2500\u2588\u2588\u2588\u2500\u2588\u2588\u2588\u2500\u2588\u2584\u2580\u2500\u2588\u2588\u2588\u2588\u2500\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\u2584\u2584\u2584\u2500\u2588\u2500\u2584\u2500\u2588\u2588\u2500\u2580\u2500\u2588\u2588\u2588\u2500\u2584\u2584\u2584\u2588\u2588\u2500\u2584\u2588\u2580\u2588\u2584\u2584\u2584\u2584\u2500\u2588\n** \u2580\u2584\u2584\u2584\u2580\u2580\u2580\u2584\u2584\u2580\u2584\u2584\u2580\u2584\u2584\u2584\u2580\u2584\u2584\u2584\u2580\u2580\u2584\u2584\u2580\u2580\u2584\u2584\u2584\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2584\u2584\u2584\u2584\u2584\u2580\u2584\u2580\u2584\u2580\u2584\u2584\u2580\u2584\u2584\u2580\u2584\u2584\u2584\u2580\u2580\u2580\u2584\u2584\u2584\u2584\u2584\u2580\u2584\u2584\u2584\u2584\u2584\u2580\n*/\n\nexport class Color {\n\n  public static readonly transparent: Color = new Color(255,255,255, 1);\n\n  public static readonly white = new Color(255, 255, 255);\n\n  public static readonly black = new Color(0, 0, 0);\n\n  private _red: number = 0;\n\n  private _green: number = 0;\n\n  private _blue: number = 0;\n\n  private _alpha: number = 0;\n\n  constructor(red: number, green: number, blue: number, alpha?: number) {\n    this._red = red;\n    this._green = green;\n    this._blue = blue;\n    this._alpha = alpha || 0;\n  }\n\n  set red(value: number) {\n    this._red = value;\n  }\n\n  set green(value: number) {\n    this._green = value;\n  }\n\n  set blue(value: number) {\n    this._blue = value;\n  }\n\n  set alpha(value: number) {\n    this._alpha = value;\n  }\n\n  get hex() {\n    const r = Math.max(0, Math.min(255, this._red));\n    const g = Math.max(0, Math.min(255, this._green));\n    const b = Math.max(0, Math.min(255, this._blue));\n\n    return (\"#\" +\n      ((1 << 24) + (r << 16) + (g << 8) + b)\n        .toString(16)\n        .slice(1)\n    );\n  }\n}", "/*\n** \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n** \u2588\u2584\u2500\u2584\u2584\u2500\u2588\u2588\u2580\u2584\u2500\u2588\u2588\u2584\u2500\u2584\u2588\u2584\u2500\u2580\u2588\u2584\u2500\u2584\u2588\u2500\u2584\u2500\u2584\u2500\u2588\u2580\u2580\u2580\u2580\u2580\u2588\u2588\u2500\u2584\u2584\u2584\u2584\u2588\u2500\u2588\u2500\u2588\u2588\u2580\u2584\u2500\u2588\u2588\u2584\u2500\u2584\u2584\u2500\u2588\u2584\u2500\u2584\u2584\u2500\u2588\u2500\u2584\u2584\u2584\u2584\u2588\n** \u2588\u2588\u2500\u2584\u2584\u2584\u2588\u2588\u2500\u2580\u2500\u2588\u2588\u2588\u2500\u2588\u2588\u2588\u2500\u2588\u2584\u2580\u2500\u2588\u2588\u2588\u2588\u2500\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\u2584\u2584\u2584\u2500\u2588\u2500\u2584\u2500\u2588\u2588\u2500\u2580\u2500\u2588\u2588\u2588\u2500\u2584\u2584\u2584\u2588\u2588\u2500\u2584\u2588\u2580\u2588\u2584\u2584\u2584\u2584\u2500\u2588\n** \u2580\u2584\u2584\u2584\u2580\u2580\u2580\u2584\u2584\u2580\u2584\u2584\u2580\u2584\u2584\u2584\u2580\u2584\u2584\u2584\u2580\u2580\u2584\u2584\u2580\u2580\u2584\u2584\u2584\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2584\u2584\u2584\u2584\u2584\u2580\u2584\u2580\u2584\u2580\u2584\u2584\u2580\u2584\u2584\u2580\u2584\u2584\u2584\u2580\u2580\u2580\u2584\u2584\u2584\u2584\u2584\u2580\u2584\u2584\u2584\u2584\u2584\u2580\n*/\n\nimport { Point } from \"../common/Point\";\nimport {Color} from \"../common/Color\";\n\n/**\n * Common contract for all geometric shapes.\n *\n * A shape:\n *  \u2022 has a list of vertices (`points`);\n *  \u2022 can report its area and perimeter (abstract);\n *  \u2022 may be moved or rotated (concrete helpers);\n *  \u2022 can be visualised by a `draw` method that must be implemented by each subclass.\n *\n * The class is marked `abstract` so it can\u2019t be instantiated directly.\n */\nexport abstract class Shape {\n\n  private _borderRadius: number = 0;\n\n  private _foregroundColor: Color = Color.black;\n\n  private _backgroundColor: Color = Color.transparent;\n\n  private _borderColor: Color = Color.transparent;\n\n  private _borderWidth: number = 0;\n\n  /**\n   * Ordered list of points that define the shape\u2019s outline.\n   *\n   * The array is *immutable* (readonly) to prevent accidental mutation\n   * outside the class.  Sub\u2011classes can add helper methods that expose a\n   * mutable view if they need to.\n   */\n  protected _points: Array<Point>;\n\n  /**\n   * @param points List of vertices that define the shape.\n   *               Must contain at least two points (otherwise the shape is degenerate).\n   */\n  protected constructor(points: Point[]) {\n    if (points.length == 0) {\n      throw new Error('A shape must have at least one point.');\n    }\n    this._points = [...points]; // shallow copy for safety\n  }\n\n  set foregroundColor(value: Color) {\n    this._foregroundColor = value;\n  }\n\n  get foregroundColor() {\n    return this._foregroundColor;\n  }\n\n  set backgroundColor(value: Color) {\n    this._backgroundColor = value;\n  }\n\n  get backgroundColor() {\n    return this._backgroundColor;\n  }\n\n  set borderColor(value: Color) {\n    this._borderColor = value;\n  }\n\n  get borderColor() {\n    return this._borderColor;\n  }\n\n  set borderWidth(value: number) {\n    this._borderWidth = value;\n  }\n\n  get borderWidth() {\n    return this._borderWidth;\n  }\n\n  set borderRadius(value: number) {\n    this._borderRadius = value;\n  }\n\n  get borderRadius() {\n    return this._borderRadius;\n  }\n\n  /**\n   * if in 2d context, depth means draw order for shapes.\n   */\n  get depth(): number {\n    return this._points[0].z || 0;\n  }\n\n  /**\n   * Translates (moves) the shape by a vector.\n   *\n   * The concrete shape can choose to either mutate the existing points or\n   * return a new shape instance \u2013 here we mutate in place for simplicity.\n   */\n  translate(nx: number, ny: number): void {\n    const p= this._points[0];\n    const dx= p.x - nx;\n    const dy= p.y - ny;\n    for (let i= 0; i < this._points.length; i++) {\n      const p= this._points[i];\n      p.x = p.x - dx;\n      p.y = p.y - dy;\n    }\n  }\n\n  /** \n   * Rotates the shape around a pivot point by a given angle (in degrees). \n   */\n  rotate(angleDeg: number, pivot: Point = new Point(0, 0)): void {\n    const rad = (angleDeg * Math.PI) / 180;\n    const cos = Math.cos(rad);\n    const sin = Math.sin(rad);\n\n    for (let i = 0; i < this._points.length; i++) {\n      const p = this._points[i];\n      const x = p.x - pivot.x;\n      const y = p.y - pivot.y;\n      const nx = x * cos - y * sin + pivot.x;\n      const ny = x * sin + y * cos + pivot.y;\n      p.x = nx;\n      p.y = ny;\n    }\n  }\n\n  /**\n   * Gets offset relative to the top-left point according to the given point.\n   */\n  offset(point: Point): Point {\n    const topLeft = this._points[0];\n    return new Point(point.x - topLeft.x, point.y - topLeft.y);\n  }\n\n  place(point: Point): void {\n    this._points[0] = point;\n  }\n\n  /**\n   * Checks this shape contain the given point.\n   * \n   * @param point \n   *      the point\n   */\n  abstract contains(point: Point): boolean;\n\n}", "/*\n** \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n** \u2588\u2584\u2500\u2584\u2584\u2500\u2588\u2588\u2580\u2584\u2500\u2588\u2588\u2584\u2500\u2584\u2588\u2584\u2500\u2580\u2588\u2584\u2500\u2584\u2588\u2500\u2584\u2500\u2584\u2500\u2588\u2580\u2580\u2580\u2580\u2580\u2588\u2588\u2500\u2584\u2584\u2584\u2584\u2588\u2500\u2588\u2500\u2588\u2588\u2580\u2584\u2500\u2588\u2588\u2584\u2500\u2584\u2584\u2500\u2588\u2584\u2500\u2584\u2584\u2500\u2588\u2500\u2584\u2584\u2584\u2584\u2588\n** \u2588\u2588\u2500\u2584\u2584\u2584\u2588\u2588\u2500\u2580\u2500\u2588\u2588\u2588\u2500\u2588\u2588\u2588\u2500\u2588\u2584\u2580\u2500\u2588\u2588\u2588\u2588\u2500\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\u2584\u2584\u2584\u2500\u2588\u2500\u2584\u2500\u2588\u2588\u2500\u2580\u2500\u2588\u2588\u2588\u2500\u2584\u2584\u2584\u2588\u2588\u2500\u2584\u2588\u2580\u2588\u2584\u2584\u2584\u2584\u2500\u2588\n** \u2580\u2584\u2584\u2584\u2580\u2580\u2580\u2584\u2584\u2580\u2584\u2584\u2580\u2584\u2584\u2584\u2580\u2584\u2584\u2584\u2580\u2580\u2584\u2584\u2580\u2580\u2584\u2584\u2584\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2584\u2584\u2584\u2584\u2584\u2580\u2584\u2580\u2584\u2580\u2584\u2584\u2580\u2584\u2584\u2580\u2584\u2584\u2584\u2580\u2580\u2580\u2584\u2584\u2584\u2584\u2584\u2580\u2584\u2584\u2584\u2584\u2584\u2580\n*/\n\nimport { Shape } from \"./Shape\";\nimport { Point } from \"@/common/Point\";\n\nexport class Rectangle extends Shape {\n\n  private _topLeft: Point;\n\n  private _width: number = 0;\n\n  private _height: number = 0;\n\n  public get topLeft(): Point {\n      return this._topLeft;\n  }\n\n  /**\n   * @param topLeft  the upper\u2011left corner of the rectangle\n   * @param width    must be > 0\n   * @param height   must be > 0\n   */\n  constructor(topLeft: Point, width: number, height: number) {\n    const pts = [\n      topLeft,\n      new Point(topLeft.x + width, topLeft.y),                // top\u2011right\n      new Point(topLeft.x + width, topLeft.y + height),       // bottom\u2011right\n      new Point(topLeft.x, topLeft.y + height),               // bottom\u2011left\n    ];\n    super(pts);\n\n    if (width <= 0 || height <= 0) {\n      throw new Error('Width and height must be greater than 0.');\n    }\n    this._topLeft = topLeft;\n\n  }\n\n  contains(point: Point): boolean {\n    throw new Error(\"Method not implemented.\");\n  }\n}", "/*\n** \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n** \u2588\u2584\u2500\u2584\u2584\u2500\u2588\u2588\u2580\u2584\u2500\u2588\u2588\u2584\u2500\u2584\u2588\u2584\u2500\u2580\u2588\u2584\u2500\u2584\u2588\u2500\u2584\u2500\u2584\u2500\u2588\u2580\u2580\u2580\u2580\u2580\u2588\u2588\u2500\u2584\u2584\u2584\u2584\u2588\u2500\u2588\u2500\u2588\u2588\u2580\u2584\u2500\u2588\u2588\u2584\u2500\u2584\u2584\u2500\u2588\u2584\u2500\u2584\u2584\u2500\u2588\u2500\u2584\u2584\u2584\u2584\u2588\n** \u2588\u2588\u2500\u2584\u2584\u2584\u2588\u2588\u2500\u2580\u2500\u2588\u2588\u2588\u2500\u2588\u2588\u2588\u2500\u2588\u2584\u2580\u2500\u2588\u2588\u2588\u2588\u2500\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\u2584\u2584\u2584\u2500\u2588\u2500\u2584\u2500\u2588\u2588\u2500\u2580\u2500\u2588\u2588\u2588\u2500\u2584\u2584\u2584\u2588\u2588\u2500\u2584\u2588\u2580\u2588\u2584\u2584\u2584\u2584\u2500\u2588\n** \u2580\u2584\u2584\u2584\u2580\u2580\u2580\u2584\u2584\u2580\u2584\u2584\u2580\u2584\u2584\u2584\u2580\u2584\u2584\u2584\u2580\u2580\u2584\u2584\u2580\u2580\u2584\u2584\u2584\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2584\u2584\u2584\u2584\u2584\u2580\u2584\u2580\u2584\u2580\u2584\u2584\u2580\u2584\u2584\u2580\u2584\u2584\u2584\u2580\u2580\u2580\u2584\u2584\u2584\u2584\u2584\u2580\u2584\u2584\u2584\u2584\u2584\u2580\n*/\n\nimport { Point } from \"../common/Point\";\nimport { Rectangle } from \"./Rectangle\";\n\nexport class Square extends Rectangle {\n\n  private _side: number = 0;\n\n  constructor(topLeft: Point, side: number) {\n    if (side <= 0) {\n      throw new Error('Side length must be > 0.');\n    }\n    super(topLeft, side, side);\n    this._side = side;\n  }\n\n  get topLeft(): Point {\n    return this._points[0];\n  }\n\n  set topLeft(value: Point) {\n    this._points[0] = value;\n  }\n\n  get side(): number {\n    return this._side;\n  }\n\n  set side(value: number) {\n    this._side = value;\n  }\n\n  contains(point: Point): boolean {\n    const topLeft = this._points[0];\n    return point.x >= topLeft.x && (topLeft.x + this._side) >= point.x &&\n      point.y >= topLeft.y && (topLeft.y + this._side) >= point.y;\n  }\n\n}", "/*\n** \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n** \u2588\u2584\u2500\u2584\u2584\u2500\u2588\u2588\u2580\u2584\u2500\u2588\u2588\u2584\u2500\u2584\u2588\u2584\u2500\u2580\u2588\u2584\u2500\u2584\u2588\u2500\u2584\u2500\u2584\u2500\u2588\u2580\u2580\u2580\u2580\u2580\u2588\u2588\u2500\u2584\u2584\u2584\u2584\u2588\u2500\u2588\u2500\u2588\u2588\u2580\u2584\u2500\u2588\u2588\u2584\u2500\u2584\u2584\u2500\u2588\u2584\u2500\u2584\u2584\u2500\u2588\u2500\u2584\u2584\u2584\u2584\u2588\n** \u2588\u2588\u2500\u2584\u2584\u2584\u2588\u2588\u2500\u2580\u2500\u2588\u2588\u2588\u2500\u2588\u2588\u2588\u2500\u2588\u2584\u2580\u2500\u2588\u2588\u2588\u2588\u2500\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\u2584\u2584\u2584\u2500\u2588\u2500\u2584\u2500\u2588\u2588\u2500\u2580\u2500\u2588\u2588\u2588\u2500\u2584\u2584\u2584\u2588\u2588\u2500\u2584\u2588\u2580\u2588\u2584\u2584\u2584\u2584\u2500\u2588\n** \u2580\u2584\u2584\u2584\u2580\u2580\u2580\u2584\u2584\u2580\u2584\u2584\u2580\u2584\u2584\u2584\u2580\u2584\u2584\u2584\u2580\u2580\u2584\u2584\u2580\u2580\u2584\u2584\u2584\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2584\u2584\u2584\u2584\u2584\u2580\u2584\u2580\u2584\u2580\u2584\u2584\u2580\u2584\u2584\u2580\u2584\u2584\u2584\u2580\u2580\u2580\u2584\u2584\u2584\u2584\u2584\u2580\u2584\u2584\u2584\u2584\u2584\u2580\n*/\nimport {Point} from \"@/common/Point\";\nimport {Shape} from \"./Shape\";\n\n/**\n * A simple, immutable Circle.\n *\n * @example\n * const c = new Circle(5);\n * console.log(c.area);            // 78.53981633974483\n * console.log(c.circumference);   // 31.41592653589793\n * console.log(c.toString());      // Circle(radius: 5)\n *\n * // Create from diameter\n * const d = Circle.fromDiameter(10);\n * console.log(d.radius);          // 5\n */\nexport class Circle extends Shape {\n\n  private _radius: number = 0;\n\n  private _center: Point;\n\n  constructor(center: Point, radius: number) {\n    const pts = [center];\n    super(pts);\n\n    if (radius < 0) {\n      throw new RangeError('Radius must be \u2265 0');\n    }\n    this._radius = radius;\n    this._center = center;\n  }\n\n  get radius(): number {\n    return this._radius;\n  }\n\n  set radius(value: number) {\n    this._radius = value;\n  }\n\n  get center(): Point {\n    return this._center;\n  }\n\n  set center(point: Point) {\n    this._center = point;\n    this._points[0] = this._center;\n  }\n\n  get area(): number {\n    return Math.PI * this._radius * this._radius;\n  }\n\n  // offset(point: Point): Point {\n  //   const topLeft = new Point(this._center.x - this._radius, this._center.y - this._radius);\n  //   return new Point(point.x - topLeft.x, point.y - topLeft.y);\n  // }\n\n  place(point: Point): void {\n    this.center = point;\n  }\n\n  contains(point: Point): boolean {\n    const dx = point.x - this._center.x;\n    const dy = point.y - this._center.y;\n    return dx * dx + dy * dy <= this._radius * this._radius;\n  }\n}\n", "/*\n** \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n** \u2588\u2584\u2500\u2584\u2584\u2500\u2588\u2588\u2580\u2584\u2500\u2588\u2588\u2584\u2500\u2584\u2588\u2584\u2500\u2580\u2588\u2584\u2500\u2584\u2588\u2500\u2584\u2500\u2584\u2500\u2588\u2580\u2580\u2580\u2580\u2580\u2588\u2588\u2500\u2584\u2584\u2584\u2584\u2588\u2500\u2588\u2500\u2588\u2588\u2580\u2584\u2500\u2588\u2588\u2584\u2500\u2584\u2584\u2500\u2588\u2584\u2500\u2584\u2584\u2500\u2588\u2500\u2584\u2584\u2584\u2584\u2588\n** \u2588\u2588\u2500\u2584\u2584\u2584\u2588\u2588\u2500\u2580\u2500\u2588\u2588\u2588\u2500\u2588\u2588\u2588\u2500\u2588\u2584\u2580\u2500\u2588\u2588\u2588\u2588\u2500\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\u2584\u2584\u2584\u2500\u2588\u2500\u2584\u2500\u2588\u2588\u2500\u2580\u2500\u2588\u2588\u2588\u2500\u2584\u2584\u2584\u2588\u2588\u2500\u2584\u2588\u2580\u2588\u2584\u2584\u2584\u2584\u2500\u2588\n** \u2580\u2584\u2584\u2584\u2580\u2580\u2580\u2584\u2584\u2580\u2584\u2584\u2580\u2584\u2584\u2584\u2580\u2584\u2584\u2584\u2580\u2580\u2584\u2584\u2580\u2580\u2584\u2584\u2584\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2584\u2584\u2584\u2584\u2584\u2580\u2584\u2580\u2584\u2580\u2584\u2584\u2580\u2584\u2584\u2580\u2584\u2584\u2584\u2580\u2580\u2580\u2584\u2584\u2584\u2584\u2584\u2580\u2584\u2584\u2584\u2584\u2584\u2580\n*/\nimport { Shape } from \"@/shape/Shape\";\nimport {Color} from \"@/common/Color\";\n\nexport abstract class ShapeRenderer {\n\n  /**\n   * Renders a shape in two-dimensional plane.\n   */\n  abstract render(ctx: CanvasRenderingContext2D, shape: Shape): void;\n\n  /**\n   * Draws a rectangle with the same radius on all four corners.\n   * Works in all browsers that support CanvasRenderingContext2D.\n   */\n  static renderRoundedRect(ctx: CanvasRenderingContext2D,\n                           x: number, y: number, width: number, height: number,\n                           borderRadius: number,\n                           borderWidth: number,\n                           borderColor: Color,\n                           backgroundColor: Color) {\n    ctx.beginPath();\n    ctx.moveTo(x + borderRadius, y);\n    ctx.lineTo(x + width - borderRadius, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + borderRadius);\n    ctx.lineTo(x + width, y + height - borderRadius);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - borderRadius, y + height);\n    ctx.lineTo(x + borderRadius, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - borderRadius);\n    ctx.lineTo(x, y + borderRadius);\n    ctx.quadraticCurveTo(x, y, x + borderRadius, y);\n    ctx.closePath();\n\n    if (backgroundColor) {\n      ctx.fillStyle = backgroundColor.hex;\n    }\n    ctx.strokeStyle = borderColor.hex;\n    ctx.lineWidth = borderWidth;\n\n    if (backgroundColor) {\n      ctx.fill();\n    }\n    ctx.stroke();\n  }\n}", "/*\n** \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n** \u2588\u2584\u2500\u2584\u2584\u2500\u2588\u2588\u2580\u2584\u2500\u2588\u2588\u2584\u2500\u2584\u2588\u2584\u2500\u2580\u2588\u2584\u2500\u2584\u2588\u2500\u2584\u2500\u2584\u2500\u2588\u2580\u2580\u2580\u2580\u2580\u2588\u2588\u2500\u2584\u2584\u2584\u2584\u2588\u2500\u2588\u2500\u2588\u2588\u2580\u2584\u2500\u2588\u2588\u2584\u2500\u2584\u2584\u2500\u2588\u2584\u2500\u2584\u2584\u2500\u2588\u2500\u2584\u2584\u2584\u2584\u2588\n** \u2588\u2588\u2500\u2584\u2584\u2584\u2588\u2588\u2500\u2580\u2500\u2588\u2588\u2588\u2500\u2588\u2588\u2588\u2500\u2588\u2584\u2580\u2500\u2588\u2588\u2588\u2588\u2500\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\u2584\u2584\u2584\u2500\u2588\u2500\u2584\u2500\u2588\u2588\u2500\u2580\u2500\u2588\u2588\u2588\u2500\u2584\u2584\u2584\u2588\u2588\u2500\u2584\u2588\u2580\u2588\u2584\u2584\u2584\u2584\u2500\u2588\n** \u2580\u2584\u2584\u2584\u2580\u2580\u2580\u2584\u2584\u2580\u2584\u2584\u2580\u2584\u2584\u2584\u2580\u2584\u2584\u2584\u2580\u2580\u2584\u2584\u2580\u2580\u2584\u2584\u2584\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2584\u2584\u2584\u2584\u2584\u2580\u2584\u2580\u2584\u2580\u2584\u2584\u2580\u2584\u2584\u2580\u2584\u2584\u2584\u2580\u2580\u2580\u2584\u2584\u2584\u2584\u2584\u2580\u2584\u2584\u2584\u2584\u2584\u2580\n*/\nimport { Shape } from \"@/shape/Shape\";\nimport { Circle } from \"@/shape/Circle\";\nimport { ShapeRenderer } from \"@/renderer/ShapeRenderer\";\n\nexport class CircleRenderer extends ShapeRenderer {\n\n  render(ctx: CanvasRenderingContext2D, shape: Shape): void {\n    const circle = shape as Circle;\n    ctx.beginPath();\n    ctx.arc(circle.center.x, circle.center.y, circle.radius, 0, Math.PI * 2);\n    ctx.closePath();\n\n    if (circle.backgroundColor) {\n      ctx.fillStyle = circle.backgroundColor.hex;\n      ctx.fill();\n    }\n\n    if (circle.borderWidth > 0){\n      ctx.lineWidth   = circle.borderWidth;\n      ctx.strokeStyle = circle.borderColor.hex;\n      ctx.stroke();\n    } else {\n      if (circle.backgroundColor) {\n        ctx.strokeStyle = circle.backgroundColor.hex;\n        ctx.stroke();\n      }\n    }\n  }\n\n}", "/*\n** \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n** \u2588\u2584\u2500\u2584\u2584\u2500\u2588\u2588\u2580\u2584\u2500\u2588\u2588\u2584\u2500\u2584\u2588\u2584\u2500\u2580\u2588\u2584\u2500\u2584\u2588\u2500\u2584\u2500\u2584\u2500\u2588\u2580\u2580\u2580\u2580\u2580\u2588\u2588\u2500\u2584\u2584\u2584\u2584\u2588\u2500\u2588\u2500\u2588\u2588\u2580\u2584\u2500\u2588\u2588\u2584\u2500\u2584\u2584\u2500\u2588\u2584\u2500\u2584\u2584\u2500\u2588\u2500\u2584\u2584\u2584\u2584\u2588\n** \u2588\u2588\u2500\u2584\u2584\u2584\u2588\u2588\u2500\u2580\u2500\u2588\u2588\u2588\u2500\u2588\u2588\u2588\u2500\u2588\u2584\u2580\u2500\u2588\u2588\u2588\u2588\u2500\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\u2584\u2584\u2584\u2500\u2588\u2500\u2584\u2500\u2588\u2588\u2500\u2580\u2500\u2588\u2588\u2588\u2500\u2584\u2584\u2584\u2588\u2588\u2500\u2584\u2588\u2580\u2588\u2584\u2584\u2584\u2584\u2500\u2588\n** \u2580\u2584\u2584\u2584\u2580\u2580\u2580\u2584\u2584\u2580\u2584\u2584\u2580\u2584\u2584\u2584\u2580\u2584\u2584\u2584\u2580\u2580\u2584\u2584\u2580\u2580\u2584\u2584\u2584\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2584\u2584\u2584\u2584\u2584\u2580\u2584\u2580\u2584\u2580\u2584\u2584\u2580\u2584\u2584\u2580\u2584\u2584\u2584\u2580\u2580\u2580\u2584\u2584\u2584\u2584\u2584\u2580\u2584\u2584\u2584\u2584\u2584\u2580\n*/\nimport { ShapeRenderer } from \"@/renderer/ShapeRenderer\";\nimport { Shape } from \"@/shape/Shape\";\nimport {Square} from \"@/shape/Square\";\n\nexport class SquareRenderer extends ShapeRenderer {\n\n  render(ctx: CanvasRenderingContext2D, shape: Shape): void {\n    const square = shape as Square;\n    if (square.borderRadius > 0) {\n      ctx.strokeStyle = square.borderColor.hex;\n      ctx.lineWidth = square.borderWidth;\n\n      if (square.backgroundColor) {\n        ctx.fillStyle = square.backgroundColor.hex;\n        ctx.fillRect(square.topLeft.x, square.topLeft.y, square.side, square.side);\n      }\n      ctx.strokeRect(square.topLeft.x, square.topLeft.y, square.side, square.side);\n    } else {\n      ShapeRenderer.renderRoundedRect(ctx,\n        square.topLeft.x, square.topLeft.y, square.side, square.side,\n        square.borderRadius, square.borderWidth, square.borderColor,\n        square.backgroundColor);\n    }\n  }\n\n}", "/*\n** \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n** \u2588\u2584\u2500\u2584\u2584\u2500\u2588\u2588\u2580\u2584\u2500\u2588\u2588\u2584\u2500\u2584\u2588\u2584\u2500\u2580\u2588\u2584\u2500\u2584\u2588\u2500\u2584\u2500\u2584\u2500\u2588\u2580\u2580\u2580\u2580\u2580\u2588\u2588\u2500\u2584\u2584\u2584\u2584\u2588\u2500\u2588\u2500\u2588\u2588\u2580\u2584\u2500\u2588\u2588\u2584\u2500\u2584\u2584\u2500\u2588\u2584\u2500\u2584\u2584\u2500\u2588\u2500\u2584\u2584\u2584\u2584\u2588\n** \u2588\u2588\u2500\u2584\u2584\u2584\u2588\u2588\u2500\u2580\u2500\u2588\u2588\u2588\u2500\u2588\u2588\u2588\u2500\u2588\u2584\u2580\u2500\u2588\u2588\u2588\u2588\u2500\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\u2584\u2584\u2584\u2500\u2588\u2500\u2584\u2500\u2588\u2588\u2500\u2580\u2500\u2588\u2588\u2588\u2500\u2584\u2584\u2584\u2588\u2588\u2500\u2584\u2588\u2580\u2588\u2584\u2584\u2584\u2584\u2500\u2588\n** \u2580\u2584\u2584\u2584\u2580\u2580\u2580\u2584\u2584\u2580\u2584\u2584\u2580\u2584\u2584\u2584\u2580\u2584\u2584\u2584\u2580\u2580\u2584\u2584\u2580\u2580\u2584\u2584\u2584\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2584\u2584\u2584\u2584\u2584\u2580\u2584\u2580\u2584\u2580\u2584\u2584\u2580\u2584\u2584\u2580\u2584\u2584\u2584\u2580\u2580\u2580\u2584\u2584\u2584\u2584\u2584\u2580\u2584\u2584\u2584\u2584\u2584\u2580\n*/\nimport {Shape} from \"@/shape/Shape\";\nimport {Circle} from \"@/shape/Circle\";\nimport {CircleRenderer} from \"@/renderer/CircleRenderer\";\nimport {Square} from \"@/shape/Square\";\nimport {SquareRenderer} from \"@/renderer/SquareRenderer\";\nimport {Point} from \"@/common/Point\";\nimport {Color} from \"@/common/Color\";\n\nexport class FlatPlayground {\n\n  public static CIRCLE_RENDERER: CircleRenderer = new CircleRenderer();\n\n  public static SQUARE_RENDERER: SquareRenderer = new SquareRenderer();\n\n  private _width: number = 0;\n\n  private _height: number = 0;\n\n  private _shapes: Shape[] = [];\n\n  private readonly _ctx: CanvasRenderingContext2D;\n\n  constructor(ctx: CanvasRenderingContext2D, width: number, height: number) {\n    this._ctx = ctx;\n    this._width = width;\n    this._height = height;\n  }\n\n  render(): void {\n    this._ctx.clearRect(0, 0, this._width, this._height);\n    const shapes = this._shapes.sort((a, b) => a.depth - a.depth);\n    for (let i = 0; i < shapes.length; i++) {\n      const shape = shapes[i];\n      if (shape instanceof Circle) {\n        FlatPlayground.CIRCLE_RENDERER.render(this._ctx, shape);\n      } else if (shape instanceof Square) {\n        FlatPlayground.SQUARE_RENDERER.render(this._ctx, shape);\n      }\n    }\n  }\n\n  select(x: number, y: number): Shape {\n    let retVal:Shape | null = null;\n    const p: Point = new Point(x, y);\n    for (let i = 0; i < this._shapes.length; i++) {\n      this._shapes[i].borderWidth = 0;\n      this._shapes[i].borderColor = Color.transparent;\n    }\n    for (let i = 0; i < this._shapes.length; i++) {\n      if (this._shapes[i].contains(p)) {\n        this._shapes[i].borderWidth = 2;\n        this._shapes[i].borderColor = new Color(122, 36, 188);\n        retVal = this._shapes[i];\n      }\n    }\n    this.render();\n    return <Shape>retVal;\n  }\n\n  addShape(shape: Shape): void {\n    this._shapes.push(shape);\n    this.render();\n  }\n\n  shiftShape(shape: Shape, mousepos: Point, offset: Point): void {\n    if (shape instanceof Circle) {\n      shape.place(new Point(mousepos.x - offset.x, mousepos.y - offset.y));\n    } else {\n      shape.place(new Point(mousepos.x - offset.x, mousepos.y - offset.y));\n    }\n    this.render();\n  }\n}"],
  "mappings": "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",
  "names": ["p"]
}
